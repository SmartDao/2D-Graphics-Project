#version 450

out vec4 FragColor;
  
in vec2 UVs;

//uniform sampler2D screenTexture;
uniform sampler2D standardPassTex;
uniform sampler2D lightMapPassTex;
uniform sampler2D occlusionMapPassTex;
uniform vec2 lightDirection;

const float offset = 10/300.0;

void main()
{ 
	vec4 standardTexture = texture(standardPassTex, UVs);
	vec4 lightMapTexture = texture(lightMapPassTex, UVs);
	vec4 occlusionMapTexture = texture(occlusionMapPassTex, UVs);
	float lightSmoothness = 0.0045;
	
	//vec2 offsets[9] = vec2 [] (
	//vec2(-offset, offset), // top-left
	//vec2( 0.0f,   offset), // top-center
	//vec2( offset, offset), // top-right
	//vec2(-offset, 0.0f), // center-left
	//vec2( 0.0f,   0.0f), // center-center
	//vec2(offset, 0.0f), // center-right
	//vec2(-offset, -offset), // bottom-left
	//vec2( 0.0f,   -offset), // bottom-center
	//vec2( offset, -offset) // bottom-right
	//);
	//
	//float kernel[9] = float[] (
	//1.0 /76, 2.0 /76, 40.0 /76,
	//2.0 /76, 24.0 /76, 2.0 /76,
	//40.0 /76, 2.0 /76, 1.0 /76
	//);
	
	vec3 sampleTex[9];
	
	//for(int i = 0; i < 9; i++)
	//{
	//	sampleTex[i] = vec3(texture(lightMapPassTex, UVs.st + offsets[i]));
	//}
	//
	
	//vec3 col = vec3(0.0);
	
	vec4 combinedTexture = (standardTexture + lightMapTexture + occlusionMapTexture) * 0.33333;
	
	vec2 step = lightDirection * lightSmoothness;
	
	//vec2 step = vec2(0.0045, 0.0045); // Have this be modified by a uniform value (or calculated based on light position or something)
	
	vec2 current = UVs;
	
	for (int i = 0; i < 100; i++)
	{
		if(texture(occlusionMapPassTex, current).r < 1)
		{
			break;
		}
		if(texture(lightMapPassTex, current).r > 0.5)
		{
				combinedTexture += vec4(0.01, 0.01, 0.01, 0);			
		}
		
				
		current += step;
	}
	
	////////////////////////////////////////////////////////////
	/////////// Teacher's code, analysis begins here ///////////
	////////////////////////////////////////////////////////////
	//                                                        //
	//vec2 lightMovement = vec2(0.0, -0.01);                  //
	//                                                        //
	//vec2 currentUV = UVs;                                   //
	//for (int i = 0; i < SOME_MAXIMUM; i++)                  //
	//{                                                       //
	//	if (texture(lightMapPassTex, currentUVs).r > 0.5)     //
	//	{                                                     //
	//		//Do something to brighten the pixel              //
	//	}                                                     //
	//	currentUV += lightMovement;                           //
	//}                                                       //
	//                                                        //
	////////////////////////////////////////////////////////////
	///////////  Teacher's code, analysis ends here  ///////////
	////////////////////////////////////////////////////////////
	
	//for (int i = 0; i < 9; i++)
	//{
	//	col += sampleTex[i] * kernel[i];
	//}
	
	

	
	//for(int i = 0; i < 9; i++)
	//{
	//	if(sampleTex[i].r < 0.75 && sampleTex[i].g < 0.75 && sampleTex[i].b < 0.75)
	//	{
	//		sampleTex[i].r = 0;
	//		sampleTex[i].g = 0;
	//		sampleTex[i].b = 0;
	//	}
	//}
	
	//FragColor = vec4(col, 1.0);
	FragColor = combinedTexture;
	//FragColor = combinedTexture;
	//FragColor = vec4(UVs, 0,1);
	//FragColor = texture(standardPassTex, UVs + vec2(0.01, 0.0)) + texture(standardPassTex, UVs + vec2(-0.01, 0.0));
	//FragColor = texture(lightMapPassTex, UVs + vec2(0.01, 0.0)) + texture(lightMapPassTex, UVs + vec2(-0.01, 0.0));
}