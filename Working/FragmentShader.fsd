#version 450

out vec4 FragColor;

in vec3 Color;
in vec2 TexCoord;
in vec3 Fragpos;

uniform vec3 lightColor;
uniform vec3 lightDirection;

uniform sampler2D diffuse;
uniform sampler2D normal;
uniform sampler2D specular;

uniform mat4 rotationMat;

void main()
{
	
	vec3 viewDir = vec3(0,0,-1);

	
	vec3 halfwayDir = normalize(-lightDirection + viewDir);

	float specularStrength = 2.0f;
	
	
	

	vec4 specularTexture = texture(specular, vec2(TexCoord.x, 1.0 -TexCoord.y));
	vec4 diffuseTexture = texture(diffuse, vec2(TexCoord.x, 1.0 -TexCoord.y));
	vec4 normalTexture = texture(normal, vec2(TexCoord.x, 1.0 - TexCoord.y));
	vec3 unpackedNormal = normalTexture.xyz * 2 - 1;
	
	//vec4 rotatedNormal = rotationMat * vec4(unpackedNormal, 0);
	vec4 rotatedNormal = vec4(unpackedNormal, 0);
	
	vec3 reflectedLight = reflect( -lightDirection, rotatedNormal.xyz);
	
	//float spec = pow(max(dot(viewDir,reflectedLight), 0.0),32); // Old spec calculation
	
	float spec = pow(max(dot(rotatedNormal.xyz, halfwayDir), 0.0), specularStrength); // New spec calculation
	
	float testDotProduct = dot(lightDirection, reflectedLight);
	
	
	if(testDotProduct < 0) 
	{
		spec = 0;
	}
	
	if(diffuseTexture.a < 1)
	{
		discard;
	}
	
	
	
	//vec3 specularResult = specularStrength * spec * lightColor; // First specular lighting
	
	//vec3 specularResult = spec * specularTexture.xyz; // Specular map lighting
	
	vec3 specularResult = lightColor * spec; // Blinn-Phong specular
	
	float otherDotProduct = dot(-lightDirection, rotatedNormal.xyz);
	
	float pixelBrightness = clamp(otherDotProduct, 0, 1);
	
	//diffuseTexture = vec4(0,0,0,0);
	
	//vec4 mixedTexture = mix(texture(texture1, vec2(TexCoord.x, 1.0 -TexCoord.y)), texture(texture2,TexCoord), 0.2);
	//FragColor = specularTexture;
	//FragColor = vec4(rotatedNormal);
	//FragColor = normalTexture;
    FragColor = diffuseTexture * pixelBrightness + vec4(specularResult, 1);
	//FragColor = vec4(spec, spec, spec, 1);
	//FragColor = vec4(lightDirection.xyz, 1);
	//FragColor = mixedTexture * vec4(lightColor,1);
}
